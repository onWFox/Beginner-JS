Чтобы показать переменую внитри строки надо поставаить обратные кавычки (Буква Ё).
   выв 
null для неизвестных значений – отдельный тип, имеющий одно значение null.
        undefined для неприсвоенных значений – отдельный тип, имеющий одно значение undefined.
        symbol для уникальных идентификаторов.
    И один не является «примитивным» и стоит особняком:
        object для более сложных структур данных.

Оператор typeof позволяет нам увидеть, какой тип данных сохранён в переменной.

    Имеет две формы: typeof x или typeof(x).
    Возвращает строку с именем типа. Например, "string".
    Для null возвращается "object" – это ошибка в языке, на самом деле это не объект.
prompt-выводит окно в которое пользователь должен вписать что-либо.
    let age = prompt('Сколько тебе лет?', 100);
confirm-Функция confirm отображает модальное окно с текстом вопроса question и двумя кнопками: OK и Отмена.
Преобразование типов данных:
    let value = true;
    alert(typeof value);

    value = String(value);
    alert(typeof value);
    Преобразование value происходит посредствам указание перед скобками типа данных(в нашем случаи это String)
    Значение 	Преобразуется в…
undefined 	NaN
null 	0
true / false 	1 / 0
string 	Пробельные символы (пробелы, знаки табуляции \t, знаки новой строки \n и т. п.) по краям обрезаются.
 Далее, если остаётся пустая строка, то получаем 0, иначе из непустой строки «считывается» число. 
 При ошибке результат NaN.
Логическое преобразование данных
    Например:

alert( Boolean(1) ); // true
alert( Boolean(0) ); // false

alert( Boolean("Привет!") ); // true
alert( Boolean("") ); // false
Плюс + существует в двух формах: бинарной, которую мы использовали выше, и унарной.

Унарный, то есть применённый к одному значению, плюс + ничего не делает с числами. Но если операнд не число, унарный плюс преобразует его в число.

Например:

// Не влияет на числа
let x = 1;
alert( +x ); // 1

let y = -2;
alert( +y ); // -2

// Преобразует не числа в числа
alert( +true ); // 1
alert( +"" );   // 0